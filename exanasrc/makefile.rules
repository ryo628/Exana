##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TEST_TOOL_ROOTS := 
#loopContextProf
#memStreamAna


# This defines the tests to be run that were not already defined in TEST_TOOL_ROOTS.
TEST_ROOTS :=

# This defines a list of tests that should run in the "short" sanity. Tests in this list must also
# appear either in the TEST_TOOL_ROOTS or the TEST_ROOTS list.
# If the entire directory should be tested in sanity, assign TEST_TOOL_ROOTS and TEST_ROOTS to the
# SANITY_SUBSET variable in the tests section below (see example in makefile.rules.tmpl).
SANITY_SUBSET :=

# This defines the tools which will be run during the the tests, and were not already defined in
# TEST_TOOL_ROOTS.
TOOL_ROOTS := Exana

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=


# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS := staticAna loopMarkers memAna loopContextProf main print file generateDot instStat MemPatMakeStr idorder MemPat replaceRtn OrderPat OrderPatMakeStr getOptions utils fini cacheSim


# csim cCache3l Cache_Set Cache_Parameter Cache_Ctrl Cache_Body Cache_Block CRC_replacement_state 

#OBJ := staticAna.o loopMarkers.o memAna.o loopContextProf.o main.o 
OBJ := $(OBJECT_ROOTS:%=$(OBJDIR)%$(OBJ_SUFFIX))
#OBJ := $(OBJECT_ROOTS)

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.
getOptions.o: getOptions.h getOptions.cpp
utils.o: utils.h utils.cpp
fini.o: fini.h fini.cpp cacheSim.h

cacheSim.o: cacheSim.cpp cacheSim.h

MemPatMakeStr.o: MemPatMakeStr.cpp MemPatMakeStr.h
OrderPatMakeStr.o: OrderPatMakeStr.cpp OrderPatMakeStr.h
OrderPat.o: OrderPat.cpp OrderPat.h
idorder.o: idorder.cpp idorder.h
MemPat.o: MemPat.cpp MemPat.h APANAMakeStr.o idorder.o
replaceRtn.o:replaceRtn.cpp replaceRtn.h

staticAna.o : staticAna.cpp staticAna.h loopContextProf.h main.h
loopMarkers.o : loopMarkers.cpp loopMarkers.h loopContextProf.h main.h
loopContextProf.o : loopContextProf.cpp staticAna.h loopMarkers.h loopContextProf.h memAna.h main.h cacheSim.h sampling.h 
#ExanaDBT.h
memAna.o : memAna.cpp memAna.h loopContextProf.h staticAna.h main.h
main.o : loopContextProf.cpp staticAna.h loopMarkers.h loopContextProf.h memAna.h main.h getOptions.h getOptions.cpp utils.h utils.cpp fini.cpp fini.h

# ExanaDBT.o : sampling.h ExanaEBT.h


print.o : print.cpp main.h
file.o : file.cpp main.h
generateDot.o : generateDot.cpp main.h
main.h : genarateDot.h print.h file.h 

instStat.o : instStat.h staticAna.h loopMarkers.h loopContextProf.h memAna.h

#replacement_state.o: CRC_replacement_state.h CRC_replacement_state.cpp CRC_replacement_dip.h CRC_replacement_cache_defs.h

#cCache3l.o: cCache3l.cpp cCache3l.h replacement_state.cpp
#Cache_Set.o: Cache_Set.cpp Cache_Set.h
#Cache_Parameter.o: Cache_Parameter.cpp Cache_Parameter.h
#Cache_Ctrl.o: Cache_Ctrl.cpp Cache_Ctrl.h
#Cache_Body.o: Cache_Body.cpp Cache_Body.h
#Cache_Block.o: Cache_Block.cpp Cache_Block.h
#csim.o: csim.cpp csim.h



# Build the tool as a dll (shared object).
$(OBJDIR)%$(PINTOOL_SUFFIX): $(OBJDIR)%$(OBJ_SUFFIX) $(OBJ)
#	echo $(OBJDIR)$(OBJ)
#	$(LINKER) $<
	$(LINKER) $(TOOL_LDFLAGS) $(LINK_EXE)$@ $(OBJ) $(TOOL_LPATHS) $(TOOL_LIBS)
